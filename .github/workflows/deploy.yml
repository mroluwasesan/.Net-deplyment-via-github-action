name: Deploy to Azure VM

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish --configuration Release --no-build --output ./out

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VM
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USER: ${{ secrets.SSH_USER }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -T ${SSH_USER}@${VM_IP} << EOF
          set -e
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker \$USER
          fi
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest
          sudo docker rm -f webapp || true
          sudo docker run -d -p 80:80 --name webapp --restart unless-stopped ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest
        EOF
